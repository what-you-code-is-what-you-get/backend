{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 */
#}

{% set linkArray = [
  {
    text: 'Start',
    link: "/challenge/lobby/" ~ node.id,
    style: "green",
  },
  {
    text: 'Submissions',
    link: "/challenge/submissions/" ~ node.id,
    style: "green",
  },
  {
    text: 'Voting information',
    link: "/challenge/voting/" ~ node.id,
    style: "green",
  },
  {
    text: 'Podium',
    link: "/challenge/podium/" ~ node.id,
    style: "green",
  },
  {
    text: 'All votes',
    link: "/challenge/votes/" ~ node.id,
    style: "green",
  },
] %}


{{ attach_library('wyciwyg/node') }}
<article class="challenge">
  <div class="header">
    <h1{{ title_attributes }}>
        {{ label|render|striptags|trim }}
    </h1>
  </div>
  
  <div class="sidebar">
    {{ content.field_reference_image }}

    <div class="buttons">
      {% for link in linkArray %}
        {% include 'wyciwyg:sdc_link' with {
          text: link.text,
          link: link.link,
          style: link.style,
        } %}
      {% endfor %}
    </div>
  </div>
  <div class="content">
    <div class="gamepin-time">
      {{ content.field_game_pin }}
      {{ content.field_time }}
    </div>
    <div class="grid">
      {{ content.field_game_mode }}
      {{ content.field_email_checkbox }}
      {{ content.field_phone_checkbox }}
    </div>
    {{ content.field_instructions }}
      <div class="assets">
        <div class="field__label">Assets</div>
        <div class="assets-wrapper">
          {% for item in content.field_assets %}
            {% if item['#item'].entity.uri.value %}
              <div class="asset">
              {% set image_uri = item['#item']|file_uri %}
                <img src="{{ image_uri|image_style('medium') }}" alt="{{ item['#item'].alt }}">
                {{ base_path ~ item['#item']|file_url }}
              </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>


  </div>
  
  

  
  {# {{ content }} #}

</article>
