<?php

/**
 * @file
 * Primary module hooks for wyciwyg-utils module.
 */

use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

 /**
 * Implements hook_entity_presave() for user entities.
 *
 * Adds the 'gamemaster' role to new users.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being saved.
 */
function wyciwyg_utils_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof User && $entity->isNew()) {
      $entity->addRole('gamemaster');
  }
}

/**
 * Alter the input field for the Game PIN on the Challenge content type.
 */
function wyciwyg_utils_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ( ($form_id === 'node_challenge_form' || $form_id === 'node_challenge_edit_form') && !empty($form['field_game_pin']['widget'][0]['value'])) {
    // Get the current PIN value
    $current_value = $form['field_game_pin']['widget'][0]['value']['#default_value'] ?? '';

    // Generate a new PIN only if it's empty
    if (empty($current_value)) {
      $new_pin = generate_unique_game_pin();
      $form['field_game_pin']['widget'][0]['value']['#default_value'] = $new_pin;
    }

    // Set attributes for validation
    $attributes = [
      'pattern' => '[A-Z0-9]{6,}', 
      'title' => 'Game PIN must be at least 6 characters long and contain only uppercase letters and numbers.',
      'oninput' => "this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '')",
    ];

    $form['field_game_pin']['widget'][0]['value']['#attributes'] = array_merge(
      $form['field_game_pin']['widget'][0]['value']['#attributes'] ?? [],
      $attributes
    );
  }

  // Update the title and description for the challenge delete confirmation form
  if ($form_id === 'node_challenge_delete_form') {
    $form['#title'] = t('Are you sure you want to delete this challenge?');
    $form['description']['#markup'] = t('This will delete the challenge, and all related submissions and votes. This action cannot be undone.');
  }
}

/**
 * Implements hook_entity_presave() to ensure the Game PIN is unique. Otherwise, generate a new one.
 *
 * Ensures the Game PIN is unique before saving.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being saved.
 */
function wyciwyg_utils_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'challenge') {
    
    $pin_field = 'field_game_pin';
    
    // Get the submitted PIN.
    $submitted_pin = $entity->get($pin_field)->value;
    
    // Ensure the PIN is unique.
    if (!empty($submitted_pin) && game_pin_exists($submitted_pin, $entity->id())) {
      \Drupal::messenger()->addError(t('The Game PIN @pin is already in use. A new PIN has been generated.', ['@pin' => $submitted_pin]));
      
      // Generate a new unique PIN and set it.
      $new_pin = generate_unique_game_pin();
      $entity->set($pin_field, $new_pin);
    }
  }
}

/**
 * Generate a unique 6-character game PIN.
 *
 * @return string
 *   A unique uppercase alphanumeric game PIN.
 */
function generate_unique_game_pin() {
  return \Drupal::service('wyciwyg_utils.game_pin_service')->generateUniqueGamePin();
}

/**
 * Implements hook_entity_delete() to delete all submissions and votes related to a challenge.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being deleted.
 */
function wyciwyg_utils_node_delete(Drupal\Core\Entity\EntityInterface $entity) {
  
  // Check if the entity is a challenge node
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'challenge') {
    
    $nid = $entity->id();

    // Load all submissions and votes related to the challenge
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $submissions = $storage->loadByProperties(['type' => 'submission', 'field_challenge_id' => $nid]);
    $votes = $storage->loadByProperties(['type' => 'vote', 'field_challenge_id' => $nid]);

    // Delete all submissions and votes related to the challenge
    foreach ($submissions as $submission) {
      $submission->delete();
    }

    foreach ($votes as $vote) {
      $vote->delete();
    }
  }
}
