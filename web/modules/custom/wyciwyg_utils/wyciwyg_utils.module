<?php

/**
 * @file
 * Primary module hooks for wyciwyg-utils module.
 */

use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

 /**
 * Implements hook_entity_presave() for user entities.
 *
 * Adds the 'gamemaster' role to new users.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being saved.
 */
function wyciwyg_utils_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof User && $entity->isNew()) {
      $entity->addRole('gamemaster');
  }
}

/**
 * Alter the input field for the Game PIN on the Challenge content type.
 */
function wyciwyg_utils_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ( ($form_id === 'node_challenge_form' || $form_id === 'node_challenge_edit_form') && !empty($form['field_game_pin']['widget'][0]['value'])) {
    // Get the current PIN value
    $current_value = $form['field_game_pin']['widget'][0]['value']['#default_value'] ?? '';

    // Generate a new PIN only if it's empty
    if (empty($current_value)) {
      $new_pin = generate_unique_game_pin();
      $form['field_game_pin']['widget'][0]['value']['#default_value'] = $new_pin;
    }

    // Set attributes for validation
    $attributes = [
      'pattern' => '[A-Z0-9]{6,}', 
      'title' => 'Game PIN must be at least 6 characters long and contain only uppercase letters and numbers.',
      'oninput' => "this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '')",
    ];

    $form['field_game_pin']['widget'][0]['value']['#attributes'] = array_merge(
      $form['field_game_pin']['widget'][0]['value']['#attributes'] ?? [],
      $attributes
    );
  }
}

/**
 * Implements hook_entity_presave() to ensure the Game PIN is unique. Otherwise, generate a new one.
 *
 * Ensures the Game PIN is unique before saving.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being saved.
 */
function wyciwyg_utils_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'challenge') {
    
    $pin_field = 'field_game_pin';
    
    // Get the submitted PIN.
    $submitted_pin = $entity->get($pin_field)->value;
    
    // Ensure the PIN is unique.
    if (!empty($submitted_pin) && game_pin_exists($submitted_pin, $entity->id())) {
      \Drupal::messenger()->addError(t('The Game PIN @pin is already in use. A new PIN has been generated.', ['@pin' => $submitted_pin]));
      
      // Generate a new unique PIN and set it.
      $new_pin = generate_unique_game_pin();
      $entity->set($pin_field, $new_pin);
    }
  }
}

/**
 * Generate a unique 6-character game PIN.
 *
 * @return string
 *   A unique uppercase alphanumeric game PIN.
 */
function generate_unique_game_pin() {
  do {
    $pin = strtoupper(substr(str_shuffle('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 0, 6));
  } while (game_pin_exists($pin)); // Ensure uniqueness

  return $pin;
}

/**
 * Check if a game PIN already exists in the database. Will exclude the current node if provided.
 *
 * @param string $pin
 *   The generated PIN to check.
 *
 * @return bool
 *   TRUE if the PIN already exists, FALSE otherwise.
 */
function game_pin_exists($pin, $exclude_nid = NULL) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'challenge')
    ->condition('field_game_pin', $pin)
    ->accessCheck(FALSE) // Explicitly disable access check to avoid QueryException
    ->range(0, 1);

  // If we are editing an existing node, exclude it from the query.
  if ($exclude_nid) {
    $query->condition('nid', $exclude_nid, '!=');
  }

  return (bool) $query->execute();
}
